---
import { Image } from "astro:assets";
import { type JSX } from "astro/jsx-runtime";
import { getImageImportNameByPossiblyRelativeName, tryGetImageByAbsoluteName } from "../images/Images";
import type { NumericBreakpoints } from "../styles/Breakpoints";
import { computeSizes, DEFAULT_IMAGE_SIZES, mergeBreakpoints } from "../styles/Breakpoints";
import { ResponsiveImageLoading } from "./ResponsiveImageLoading";
import { getEntry } from "astro:content";

interface Props {
  name: string,
  class?: string,
  style?: JSX.CSSProperties,
  height?: string,
  bg?: boolean,
  sizes?: string,
  widths?: number[],
  loading?: ResponsiveImageLoading,
  sizeModifiers?: Partial<NumericBreakpoints>
}

const {
  name,
  sizes,
  sizeModifiers,
  widths: widthsOverride,
  height = "80vh",
  loading = ResponsiveImageLoading.LAZY,
  class: clazz,
  style,
  ...other
} = Astro.props;

const absoluteName = getImageImportNameByPossiblyRelativeName(name);
const imagePromise = tryGetImageByAbsoluteName(absoluteName);
if (imagePromise === undefined) throw new Error(`Image "${name}" not found.`);
const image = (await imagePromise).default;

const alt = (await getEntry("imageMetadata", absoluteName))?.data?.title ?? "";
if (alt === "") {
  const message = `Image "${absoluteName}" has no alt text. Please add a title to the image metadata in the content folder.`;

  if (import.meta.env.MODE === "development")
    console.warn(message);
  else
    throw new Error(message);
}

const standaloneSizes: NumericBreakpoints = {
  "sm": 1,
  "md": 1,
  "lg": 1,
  "xl": 1,
  "2xl": 1,
  "3xl": 1
};

const computedSizes = computeSizes(mergeBreakpoints(standaloneSizes, sizeModifiers));
const widths: number[] = (widthsOverride ?? DEFAULT_IMAGE_SIZES).filter(s => s <= image.width);

const maxOptimizedWidth = widths[widths.length - 1];
const maxOptimizedHeight = maxOptimizedWidth * image.height / image.width;

const paddingTop = `min(${maxOptimizedHeight / maxOptimizedWidth * 100}% , ${height})`;
const styleObject: JSX.CSSProperties = { ...style, maxHeight: height };
---
<div data-name={name} style={styleObject}
     class:list={["relative size-full ", clazz]}
>
  <div style={{ paddingTop }}>
    <Image
      format="avif"
      style={{ maxHeight: height }}
      class:list={["top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 absolute z-20  object-fit", clazz]}
      quality="med"
      loading={loading}
      widths={widths}
      sizes={sizes ?? computedSizes}
      data-pswp-width={maxOptimizedWidth}
      data-pswp-height={maxOptimizedHeight}
      src={image}
      alt={alt}
      {...other}
    />
  </div>
</div>
