---
import { type DataCollectionKey, getCollection } from "astro:content";

const astroUrl = Astro.url;
const { pathname } = astroUrl;
const url = pathname.replace(/\/$/, "");

function titleOrUndefined(o: Record<string, unknown>): string | undefined {
  if (typeof o.title === "string") {
    return o.title;
  }
  if (typeof o.name === "string") {
    return o.name;
  }
  return undefined;
}

function getSlug(o: { id: string, slug?: string, data: Record<string, unknown> }) {
  if (typeof o.data.slug === "string") {
    return o.data.slug;
  }
  if (o.slug)
    return o.slug;
  return o.id;
}

function toName(input: string): string {
  const parts = input.split("/");
  const last = parts[parts.length - 1];
  const formatted = last.replace(/[-_]/g, " ");
  return formatted.charAt(0).toUpperCase() + formatted.slice(1);
}

const contentPrefixConfig: Record<DataCollectionKey, string> = {
  testimonials: "testimonials",
  areas: "",
  einblicke: "einblicke",
  einblickeOverviews: "einblicke",
  simple: "",
  shootingCards: "cards",
  imageMetadata: ""
};

const collectionKeys = Object.entries(contentPrefixConfig)
  .filter(([, v]) => url.startsWith(`/${v}`))
  .map(([k]) => k as DataCollectionKey);


const matchingContent = (await Promise.all(
    collectionKeys
      .flatMap(async k => (await getCollection(k))
            .map(e => {
                let path = contentPrefixConfig[k];
                if (path.length > 0)
                  path = `/${  path}`;
                const slug = getSlug(e);
                if (slug)
                  path += `/${slug}`;
                return ({
                  path,
                  name: titleOrUndefined(e.data) ?? toName(slug)
                });
              }
            )
      )
  )
);


const matchingUrls = matchingContent.flatMap(k => k)
  .filter(({ path }) => url.startsWith(path) && path !== url)
  .sort(({ path: a }, { path: b }) => a.length - b.length);
---

  {url !== "" &&
    <div class="p flex flex-col md:flex-row items-center">
      <a aria-label="Startseite" href="/" class="text-lg inline-flex items-center black"><span class="text-2xl mr-2 material-symbols--home"/> Startseite</a>
      {matchingUrls.map(({ name, path }) => (
        <>
          <span class="mx-1 py-1 md:my-0 material-symbols--chevron-right text-sm"></span>
          <a class="black underline text-lg" href={path}>{name}</a>
        </>
      ))}
    </div>}