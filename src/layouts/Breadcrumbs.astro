---
import { type DataCollectionKey, getCollection } from "astro:content";

const astroUrl = Astro.url;
const { pathname } = astroUrl;
const url = pathname.replace(/\/$/, "");

function titleOrUndefined(o: Record<string, unknown>): string | undefined {
  if (typeof o.title === "string") {
    return o.title;
  }
  if (typeof o.name === "string") {
    return o.name;
  }
  return undefined;
}

function getSlug(o: { id: string, slug?: string, data: Record<string, unknown> }) {
  if (o.slug)
    return o.slug;
  return o.id;
}

function toName(input: string): string {
  const parts = input.split("/");
  const last = parts[parts.length - 1];
  const formatted = last.replace(/[-_]/g, " ");
  return formatted.charAt(0).toUpperCase() + formatted.slice(1);
}

const contentPrefixConfig: Record<DataCollectionKey, string> = {
  testimonials: "testimonials",
  areas: "",
  einblicke: "einblicke",
  einblickeOverviews: "einblicke",
  simple: "",
  agbs: "agbs",
  imageMetadata: "gallery",
  categories: "gallery"
};

const collectionKeys = Object.entries(contentPrefixConfig)
  .filter(([, v]) => v === "" || url.startsWith(`/${v}`))
  .map(([k]) => k as DataCollectionKey);


const matchingContent = (await Promise.all(
    collectionKeys
      .flatMap(async k => (await getCollection(k))
        .map(e => {
            let path = contentPrefixConfig[k];
            if (path.length > 0)
              path = `/${path}`;
            const slug = getSlug(e);
            if (slug !== "/")
              path += `/${slug}`;

            return {
              path,
              name: titleOrUndefined(e.data) ?? toName(slug)
            };
          }
        )
      )
  )
);


const matchingUrls = matchingContent.flatMap(k => k)
  // This filter is updated to match full path segments
  .filter(({ path }) => path !== "" && path !== url && url.startsWith(`${path}/`))
  .sort(({ path: a }, { path: b }) => a.length - b.length);
---

{url !== "" &&
<div class="breadcrumbs not-prose">
  <ul>
    <li><a aria-label="Startseite" href="/"><span class="mdi--home" /> Startseite</a></li>
    {matchingUrls.map(({ name, path }) => (
      <li>
        <a href={path}>{name}</a>
      </li>
    ))}
  </ul>
</div>}
