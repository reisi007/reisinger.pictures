---
interface Props {
    name: string,
    href: string
}

const {name, href} = Astro.props;
const {pathname} = Astro.url;
const subpath = pathname.match(/[^/]+/g);
const isActive = href === pathname || href === `/${subpath?.[0]}`;
---
<div data-menu class="group">
    <span class:list={[
        'box-border px-2 py-4 border-b-4 items-center flex',
        {
            'border-b-primary-alternative': isActive,
            'border-b-transparent': !isActive,
        }]}>{name}
    <span class="pl-8 mdi--keyboard-arrow-down"/>
    </span>
    <div data-submenue class="z-50 px-4">
        <div id="arrow"
             class="before:absolute before:-top-px before:right-3 before:size-2 before:-translate-y-4 before:bg-transparent before:text-primary-alternative before:content-['â–²']"
             data-popper-arrow/>
        <div class="z-50 flex max-h-[calc(2vh/3*100)] flex-col overflow-y-auto rounded-lg border border-primary-alternative bg-white px-4">
            <slot/>
        </div>
    </div>
</div>
<style>
    [data-submenue] {
        @apply hidden;
    }

    [data-submenue][data-show] {
        @apply block;
    }
</style>
<script>
    import {createPopper} from '@popperjs/core';

    function registerMenuElement(parentDiv: Element) {
        const button = parentDiv.getElementsByTagName('span')[0];
        const tooltip = parentDiv.getElementsByTagName('div')[0];

        const popperInstance = createPopper(button, tooltip, {
            placement: 'bottom',
            strategy: 'absolute',
            modifiers: [{
                name: 'offset',
                options: {
                    offset: [0, -8],
                },
            }, {
                name: 'preventOverflow',
                options: {
                    altAxis: true,
                },
            }],
        });

        function show() {
            // Make the tooltip visible
            tooltip.setAttribute('data-show', '');

            // Enable the event listeners
            popperInstance.setOptions((options) => ({
                ...options,
                modifiers: [
                    ...options.modifiers ?? [],
                    {name: 'eventListeners', enabled: true},
                ],
            }));

            // Update its position
            popperInstance.update();
        }

        function hide() {
            // Hide the tooltip
            tooltip.removeAttribute('data-show');

            // Disable the event listeners
            popperInstance.setOptions((options) => ({
                ...options,
                modifiers: [
                    ...options.modifiers ?? [],
                    {name: 'eventListeners', enabled: false},
                ],
            }));
        }

        const showEvents = ['mouseenter', 'focus'];
        const hideEvents = ['mouseleave', 'blur-sm'];

        showEvents.forEach((event) => {
            parentDiv.addEventListener(event, show);
        });

        hideEvents.forEach((event) => {
            parentDiv.addEventListener(event, hide);
        });
    }

    document.addEventListener('astro:page-load', () => {
        for (const parentDiv of document.querySelectorAll('[data-menu]')) {
            registerMenuElement(parentDiv);
        }
    });
</script>
