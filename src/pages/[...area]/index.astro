---
import { type CollectionEntry, getCollection } from "astro:content";

import BaseHead from "../../layouts/BaseHead.astro";
import FeaturedTestimonials from "../../layouts/FeaturedTestimonials.astro";
import Gallery from "../../layouts/Gallery.astro";
import MinimalPage from "../../layouts/pages/MinimalPage.astro";
import { groupBy } from "../../utils";
import SocialImage from "../../layouts/SocialImage.astro";
import type { SchemaCreationFunction } from "../../layouts/SchemaOrg";
import { createBlogPostingSchema } from "../../layouts/SchemaOrg.factory";
import { getImage } from "astro:assets";
import { getImage as getImageByName } from "../../images/Images";
import SchemaOrg from "../../layouts/SchemaOrg.astro";
import { LARGEST_IMAGE_SIZE } from "../../styles/Breakpoints";

interface Props {
  entry: CollectionEntry<"areas">,
  reviews: CollectionEntry<"testimonials">[]
}

export async function getStaticPaths() {
  const areas = await getCollection("areas");
  const testimonials = groupBy(await getCollection("testimonials"), e => e.data.type);
  return areas.map(entry => ({ params: { area: entry.slug }, props: { entry, reviews: testimonials[entry.slug] } }));
}

const { entry: { slug, render, data: { name, testimonials, images, heroImage } }, reviews: categoryReviews } = Astro.props;
const reviewSlugs: string[] | undefined = testimonials?.map(e => e.id);
const { Content } = await render();

const schemaOrgImage = await getImage({
  src: getImageByName("logo"),
  format: "webp",
  width: LARGEST_IMAGE_SIZE,
  fit: "scale-down"
});

const createData: SchemaCreationFunction = (o, me, _, url) => createBlogPostingSchema({
  url,
  headline: name,
  image: schemaOrgImage.src,
  author: me,
  publisher: o,
});
---
<MinimalPage>
  <BaseHead title={name} slot="head">
    <SocialImage name={heroImage} />
    <SchemaOrg createData={createData} />
  </BaseHead>

  <h1>{name}</h1>

  <Content />

  <FeaturedTestimonials slug={slug} categoryTestimonials={categoryReviews} featuredTestimonials={reviewSlugs} />
  <Gallery sorted={images} />
</MinimalPage>
