---
import { getCollection } from "astro:content";
import MinimalPage from "../../layouts/pages/MinimalPage.astro";
import type { InferGetStaticPropsType } from "astro";
import BaseHead from "../../layouts/BaseHead.astro";
import SocialImage from "../../layouts/SocialImage.astro";
import ResponsiveImage from "../../layouts/ResponsiveImage.astro";
import ImageMetadata from "../../layouts/ImageMetadata.astro";
import ImageCategories from "../../layouts/ImageCategories.astro";
import { getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";



export async function getStaticPaths() {
  return (await getCollection("imageMetadata")).filter(e => !e.id.endsWith("small")).map(m => ({ params: { image: m.id }, props: m }));
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { data, filePath = "xxxx" } = Astro.props;
const { title, metadata, categories = [] } = data;

const image = filePath.substring(4, filePath.lastIndexOf("."));

let einblickeEntry: CollectionEntry<"einblicke"> | undefined = undefined;

if (image.startsWith("content/einblicke")) {
  const possibleUrls = [image.substring(18, image.lastIndexOf("/"))];
  possibleUrls.push(possibleUrls[0].substring(0, possibleUrls[0].lastIndexOf("/")));

  const entries = (await Promise.all(possibleUrls.map(async e => await getEntry("einblicke", e))))
    .filter(e => e !== undefined);

  if (entries.length > 0) {
    einblickeEntry = entries[0];

  }
}

if (!title) {
  return;
}
---
<MinimalPage>
  <BaseHead title={title} slot="head">
    <SocialImage name={image} />
  </BaseHead>
  <h1>{title}</h1>

  <ResponsiveImage name={image} />

  <ImageMetadata {...metadata} />

  {categories && categories.length > 0 &&
    <ImageCategories categories={categories} einblicke={einblickeEntry} />}

</MinimalPage>