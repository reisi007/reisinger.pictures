---
import type { InferGetStaticPropsType, PaginateFunction } from "astro";
import { getCollection } from "astro:content";
import Einblicke from "../../../layouts/Einblicke.astro";
import BaseHead from "../../../layouts/BaseHead.astro";
import MinimalPage from "../../../layouts/pages/MinimalPage.astro";
import SocialImage from "../../../layouts/SocialImage.astro";
import { type SchemaCreationFunction } from "../../../layouts/SchemaOrg";
import { createCollectionPageSchema } from "../../../layouts/SchemaOrg.factory";
import { absoluteLink } from "../../../layouts/ImageUtils";
import SchemaOrg from "../../../layouts/SchemaOrg.astro";

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const overviewPages = (await getCollection("einblickeOverviews"));

  const posts = (await getCollection("einblicke")).sort(
    (a, b) => {
      const aData = a.data;
      const bData = b.data;

      return Math.max(bData.pubDate.valueOf(), bData.updated?.valueOf() ?? Number.MIN_VALUE) - Math.max(aData.pubDate.valueOf(), aData.updated?.valueOf() ?? Number.MIN_VALUE);
    }
  );

  return overviewPages.flatMap((e) => {
    const relevantPosts = posts.filter(p => e.slug === "/" || p.slug.startsWith(e.slug));
    if (relevantPosts.length === 0) return [];
    return paginate(relevantPosts, {
      pageSize: 12,
      params: { overview: e.slug },
      props: { title: e.data.title, render: e.render, slug: e.slug }
    });
  });
}
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page, title, render, slug } = Astro.props;
const { Content } = await render();
const { data: posts } = page;
const { heroImage, pubDate, updated } = posts[0].data;

const createData: SchemaCreationFunction = (_, __, df) => createCollectionPageSchema({
  name: title,
  description: "Blog BeitrÃ¤ge",
  dateModified: df(updated ?? pubDate),
  items: posts.map((e) => ({ url: absoluteLink(Astro.url, `/einblicke/${e.slug}`), name: e.data.title, type: "BlogPosting" }))
});
---
<MinimalPage>
  <BaseHead title={title} noIndex={!(slug === "/" && page.url.prev === undefined)} slot="head">
    <SocialImage name={heroImage} />
    <SchemaOrg createData={createData} />
  </BaseHead>
  <h1>{title}</h1>
  <Content />
  <Einblicke page={page} />
</MinimalPage>

---