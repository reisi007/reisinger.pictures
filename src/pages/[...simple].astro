---
import { type CollectionEntry, getCollection } from "astro:content";

import BaseHead from "../layouts/BaseHead.astro";
import MinimalPage from "../layouts/pages/MinimalPage.astro";
import SocialImage from "../layouts/SocialImage.astro";
import Published from "../layouts/Published.astro";
import type { SchemaCreationFunction } from "../layouts/SchemaOrg";
import { createWebPageSchema } from "../layouts/SchemaOrg.factory";
import SchemaOrg from "../layouts/SchemaOrg.astro";
import { getImage } from "astro:assets";
import { getImage as getImageByName } from "../images/Images";
import type { GetImageResult } from "astro";
import { LARGEST_IMAGE_SIZE } from "../styles/Breakpoints";
import { absoluteLink } from "../utils";

export async function getStaticPaths() {
  const posts = await getCollection("simple");
  return posts.map((post) => ({
    params: { simple: post.slug },
    props: post
  }));
}
type Props = CollectionEntry<"simple">;

const { render, data } = Astro.props;
const { title, description, heroImage, showContact, index = true, ...dates } = data;
const { Content } = await render();

let imageInfo: GetImageResult | undefined;
if (heroImage !== undefined)
  imageInfo = await getImage({
    src: getImageByName(heroImage),
    format: "webp",
    width: LARGEST_IMAGE_SIZE,
    fit: "scale-down"
  });

const src = imageInfo?.src;

const createData: SchemaCreationFunction = (o, p, df, url) => createWebPageSchema({
  name: title,
  description,
  url,
  author: p,
  publisher: o,
  datePublished: df(dates.pubDate),
  dateModified: df(dates.updated),
  image: src === undefined ? undefined : absoluteLink(Astro.url, src)
});
---

<MinimalPage showContact={showContact}>
  <BaseHead title={title} description={description} noIndex={!index} slot="head">
    <SocialImage name={heroImage} />
    <SchemaOrg createData={createData} />
  </BaseHead>
  <h1>{title}</h1>
  <Published {...dates} />
  <div data-toc />
  <Content />
</MinimalPage>
